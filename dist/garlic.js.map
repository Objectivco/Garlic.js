{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./garlic.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$","Storage","options","this","defined","localStorage","document","domain","setItem","removeItem","e","constructor","placeholder","getItem","JSON","parse","has","set","fn","Array","length","destroy","stringify","clean","indexOf","clear","Garlic","element","storage","init","type","$element","getOptions","path","getPath","parentForm","closest","addClass","expiresFlag","expires","data","on","events","join","proxy","persist","retrieve","extend","defaults","is","val","getVal","Date","getTime","toString","prePersistValue","prePersist","onPersist","prop","date","attr","Math","floor","parseInt","currentValue","storedValue","preRetrieve","conflictManager","enabled","detectConflict","trigger","onRetrieve","self","selectConflictDetected","find","each","index","onConflictDetected","garlicPriority","swapHandler","swapChoiceElem","template","after","text","message","swap","onSwap","remove","elem","fullPath","node","realNode","nodeName","toLowerCase","parent","siblings","children","window","location","pathname","getStorage","garlic","option","returnValue","$this","fieldOptions","inputs","excluded","Constructor","$item","storedVal","prevValue","curValue","jQuery","Zepto"],"mappings":"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","file":"garlic.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*\n  Garlic.js allows you to automatically persist your forms' text field values locally,\n  until the form is submitted. This way, your users don't lose any precious data if they\n  accidentally close their tab or browser.\n\n  author: Guillaume Potier - @guillaumepotier\n*/\n\n!function ($) {\n\n  \"use strict\";\n  /*global localStorage */\n  /*global document */\n\n  /* STORAGE PUBLIC CLASS DEFINITION\n   * =============================== */\n  var Storage = function ( options ) {\n    this.defined = 'undefined' !== typeof localStorage;\n\n    // https://github.com/Modernizr/Modernizr/blob/5eea7e2a213edc9e83a47b6414d0250468d83471/feature-detects/storage/localstorage.js#L40\n    var key = 'garlic:' + document.domain + '>test';\n    try {\n      localStorage.setItem(key, key);\n      localStorage.removeItem(key);\n    } catch (e) {\n      this.defined = false;\n    }\n  };\n\n  Storage.prototype = {\n\n    constructor: Storage\n\n    , get: function ( key, placeholder ) {\n      var value = localStorage.getItem( key );\n\n      if (value) {\n        try{\n          value = JSON.parse(value);\n        } catch (e) {\n          // ignore, fallback for older versions\n        }\n\n        return value;\n\n      } else if ('undefined' !== typeof placeholder) {\n        return placeholder;\n\n      } else {\n        return null;\n      }\n    }\n\n    , has: function ( key ) {\n      return localStorage.getItem( key ) ? true : false;\n    }\n\n    , set: function ( key, value, fn ) {\n\n      // if value is null, remove storage if exists\n      if ( '' === value || (value instanceof Array && value.length === 0)) {\n        this.destroy( key );\n      } else {\n        value = JSON.stringify(value);\n        localStorage.setItem( key , value );\n      }\n\n      return 'function' === typeof fn ? fn() : true;\n    }\n\n    , destroy: function ( key, fn ) {\n      localStorage.removeItem( key );\n      return 'function' === typeof fn ? fn() : true;\n    }\n\n    , clean: function ( fn ) {\n      for ( var i = localStorage.length - 1; i >= 0; i-- ) {\n        if ( 'undefined' === typeof Array.indexOf && -1 !== localStorage.key(i).indexOf( 'garlic:' ) ) {\n          localStorage.removeItem( localStorage.key(i) );\n        }\n      }\n\n      return 'function' === typeof fn ? fn() : true;\n    }\n\n    , clear: function ( fn ) {\n      localStorage.clear();\n      return 'function' === typeof fn ? fn() : true;\n    }\n  }\n\n /* GARLIC PUBLIC CLASS DEFINITION\n  * =============================== */\n\n  var Garlic = function ( element, storage, options ) {\n    this.init( 'garlic', element, storage, options );\n  };\n\n  Garlic.prototype = {\n\n    constructor: Garlic\n\n    /* init data, bind jQuery on() actions */\n    , init: function ( type, element, storage, options ) {\n      this.type = type;\n      this.$element = $( element );\n      this.options = this.getOptions( options );\n      this.storage = storage;\n      this.path = this.options.getPath( this.$element ) || this.getPath();\n      this.parentForm = this.$element.closest( 'form' );\n      this.$element.addClass('garlic-auto-save');\n      this.expiresFlag = !this.options.expires ? false : ( this.$element.data( 'expires' ) ? this.path : this.getPath( this.parentForm ) ) + '_flag' ;\n\n      // bind garlic events\n      this.$element.on( this.options.events.join( '.' + this.type + ' ') , false, $.proxy( this.persist, this ) );\n\n      if ( this.options.destroy ) {\n        $( this.parentForm ).on( 'submit reset' , false, $.proxy( this.destroy, this ) );\n      }\n\n      // retrieve garlic persisted data\n      this.retrieve();\n    }\n\n    , getOptions: function ( options ) {\n      return $.extend( {}, $.fn[this.type].defaults, options, this.$element.data() );\n    }\n\n    /* temporary store data / state in localStorage */\n    , persist: function () {\n\n      // some binded events are redundant (change & paste for example), persist only once by field val\n      if ( ! this.$element.is('input[type=radio], input[type=checkbox]') && ( this.val === this.getVal() ) ) {\n          return;\n      }\n\n      this.val = this.getVal();\n\n      // if auto-expires is enabled, set the expiration date for future auto-deletion\n      if ( this.options.expires ) {\n        this.storage.set( this.expiresFlag , ( new Date().getTime() + this.options.expires * 1000 ).toString() );\n      }\n      \n      // Allow changing the value to any other string\n      var prePersistValue = this.options.prePersist(this.$element, this.val);\n      if (typeof prePersistValue == 'string') {\n          this.val = prePersistValue;\n      }\n\n      this.storage.set(this.path , this.val);\n      this.options.onPersist(this.$element, this.val);\n    }\n\n    , getVal: function () {\n      return !this.$element.is( 'input[type=checkbox]' ) ? this.$element.val() : ( this.$element.prop( 'checked' ) ? 'checked' : 'unchecked' );\n    }\n\n    /* retrieve localStorage data / state and update elem accordingly */\n    , retrieve: function () {\n      if ( this.storage.has( this.path ) ) {\n\n        // if data expired, destroy it!\n        if ( this.options.expires ) {\n          var date = new Date().getTime();\n          if ( this.storage.get( this.expiresFlag ) < date.toString() ) {\n            this.storage.destroy( this.path );\n            return;\n          } else {\n            this.$element.attr( 'expires-in',  Math.floor( ( parseInt( this.storage.get( this.expiresFlag ) ) - date ) / 1000 ) );\n          }\n        }\n        \n        var currentValue = this.$element.val();\n        var storedValue = this.storage.get( this.path );\n\n        // Allow not restoring the value in case value was `false`\n        var storedValue = this.options.preRetrieve(this.$element, currentValue, storedValue);\n        if (typeof storedValue == 'boolean' && storedValue == false) {\n            return;\n        }\n\n        // if conflictManager enabled, manage fields with already provided data, different from the one stored\n        if ( this.options.conflictManager.enabled && this.detectConflict() ) {\n          return this.conflictManager();\n        }\n\n        // input[type=checkbox] and input[type=radio] have a special checked / unchecked behavior\n        if ( this.$element.is( 'input[type=radio], input[type=checkbox]' ) ) {\n\n          // for checkboxes and radios\n          if ( 'checked' === storedValue || this.$element.val() === storedValue ) {\n            return this.$element.prop( 'checked', true );\n\n          // only needed for checkboxes\n          } else if ( 'unchecked' === storedValue ) {\n            this.$element.prop( 'checked', false );\n          }\n\n          return;\n        }\n\n        // for input[type=text], select and textarea, just set val()\n        this.$element.val( storedValue );\n\n        // trigger an input event given the value has been changed\n        this.$element.trigger( 'input' );\n\n        // trigger custom user function when data is retrieved\n        this.options.onRetrieve( this.$element, storedValue );\n\n        return;\n      }\n    }\n\n    /* there is a conflict when initial data / state differs from persisted data / state */\n    , detectConflict: function() {\n      var self = this;\n\n      // radio buttons and checkboxes are yet not supported\n      if ( this.$element.is( 'input[type=checkbox], input[type=radio]' ) ) {\n        return false;\n      }\n\n      // there is a default not null value and we have a different one stored\n      if ( this.$element.val() && this.storage.get( this.path ) !== this.$element.val() ) {\n\n        // for select elements, we need to check if there is a default checked value\n        if ( this.$element.is( 'select' ) ) {\n          var selectConflictDetected = false;\n\n          // foreach each options except first one, always considered as selected, seeking for a default selected one\n          this.$element.find( 'option' ).each( function () {\n            if ( $( this ).index() !== 0 && $( this ).attr( 'selected' ) && $( this ).val() !== self.storage.get( this.path ) ) {\n              selectConflictDetected = true;\n              return;\n            }\n          });\n\n          return selectConflictDetected;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n    /* manage here the conflict, show default value depending on options.garlicPriority value */\n    , conflictManager: function () {\n\n      // user can define here a custom function that could stop Garlic default behavior, if returns false\n      if ( 'function' === typeof this.options.conflictManager.onConflictDetected\n        && !this.options.conflictManager.onConflictDetected( this.$element, this.storage.get( this.path ) ) ) {\n        return false;\n      }\n\n      if ( this.options.conflictManager.garlicPriority ) {\n        this.$element.data( 'swap-data', this.$element.val() );\n        this.$element.data( 'swap-state', 'garlic' );\n        this.$element.val( this.storage.get( this.path ) );\n      } else {\n        this.$element.data( 'swap-data', this.storage.get( this.path ) );\n        this.$element.data( 'swap-state', 'default' );\n      }\n\n      this.swapHandler();\n      this.$element.addClass( 'garlic-conflict-detected' );\n      this.$element.closest( 'input[type=submit]' ).attr( 'disabled', true );\n    }\n\n    /* manage swap user interface */\n    , swapHandler: function () {\n      var swapChoiceElem = $( this.options.conflictManager.template );\n      this.$element.after( swapChoiceElem.text( this.options.conflictManager.message ) );\n      swapChoiceElem.on( 'click', false, $.proxy( this.swap, this ) );\n    }\n\n    /* swap data / states for conflicted elements */\n    , swap: function () {\n      var val = this.$element.data( 'swap-data' );\n      this.$element.data( 'swap-state', 'garlic' === this.$element.data( 'swap-state' ) ? 'default' : 'garlic' );\n      this.$element.data( 'swap-data', this.$element.val());\n      $( this.$element ).val( val );\n      this.options.onSwap(this.$element, this.$element.data( 'swap-data'), val);\n    }\n\n    /* delete localStorage persistance only */\n    , destroy: function () {\n      this.storage.destroy( this.path );\n    }\n\n    /* remove data / reset state AND delete localStorage */\n    , remove: function () {\n      this.destroy();\n\n      if ( this.$element.is( 'input[type=radio], input[type=checkbox]' ) ) {\n        $( this.$element ).attr( 'checked', false );\n        return;\n      }\n\n      this.$element.val( '' );\n    }\n\n    /* retuns an unique identifier for form elements, depending on their behaviors:\n       * radio buttons: domain > pathname > form.<attr.name>[:eq(x)] > input.<attr.name>\n          no eq(); must be all stored under the same field name inside the same form\n\n       * checkbokes: domain > pathname > form.<attr.name>[:eq(x)] > [fieldset, div, span..] > input.<attr.name>[:eq(y)]\n          cuz' they have the same name, must detect their exact position in the form. detect the exact hierarchy in DOM elements\n\n       * other inputs: domain > pathname > form.<attr.name>[:eq(x)] > input.<attr.name>[:eq(y)]\n          we just need the element name / eq() inside a given form\n    */\n    , getPath: function ( elem ) {\n\n      if ( 'undefined' === typeof elem ) {\n        elem = this.$element;\n      }\n\n      if ( this.options.getPath( elem ) ) {\n        return this.options.getPath( elem );\n      }\n\n      // Requires one element.\n      if ( elem.length != 1 ) {\n        return false;\n      }\n\n      var path = ''\n        , fullPath = elem.is( 'input[type=checkbox]' )\n        , node = elem;\n\n      while ( node.length ) {\n        var realNode = node[0]\n          , name = realNode.nodeName;\n\n        if ( !name ) {\n          break;\n        }\n\n        name = name.toLowerCase();\n\n        var parent = node.parent()\n          , siblings = parent.children( name );\n\n        // don't need to pollute path with select, fieldsets, divs and other noisy elements,\n        // exept for checkboxes that need exact path, cuz have same name and sometimes same eq()!\n        if ( !$( realNode ).is( 'form, input, select, textarea' ) && !fullPath ) {\n          node = parent;\n          continue;\n        }\n\n        // set input type as name + name attr if exists\n        name += $( realNode ).attr( 'name' ) ? '.' + $( realNode ).attr( 'name' ) : '';\n\n        // if has sibilings, get eq(), exept for radio buttons\n        if ( siblings.length > 1 && !$( realNode ).is( 'input[type=radio]' ) ) {\n          name += ':eq(' + siblings.index( realNode ) + ')';\n        }\n\n        path = name + ( path ? '>' + path : '' );\n\n        // break once we came up to form:eq(x), no need to go further\n        if ( 'form' == realNode.nodeName.toLowerCase() ) {\n          break;\n        }\n\n        node = parent;\n      }\n\n      return 'garlic:' + document.domain + ( this.options.domain ? '*' : window.location.pathname ) + '>' + path;\n    }\n\n    , getStorage: function () {\n      return this.storage;\n    }\n  }\n\n  /* GARLIC PLUGIN DEFINITION\n  * ========================= */\n\n  $.fn.garlic = function ( option, fn ) {\n    var options = $.extend(true, {}, $.fn.garlic.defaults, option, this.data() )\n      , storage = new Storage()\n      , returnValue = false;\n\n    // this plugin heavily rely on local Storage. If there is no localStorage or data-storage=false, no need to go further\n    if ( !storage.defined ) {\n      return false;\n    }\n\n    function bind ( self ) {\n      var $this = $( self )\n        , data = $this.data( 'garlic' )\n        , fieldOptions = $.extend( {}, options, $this.data() );\n\n      // don't bind an elem with data-storage=false\n      if ( 'undefined' !== typeof fieldOptions.storage && !fieldOptions.storage ) {\n        return;\n      }\n\n      // don't bind a password type field\n      if ( 'password' === $( self ).attr( 'type' ) ) {\n        return;\n      }\n\n      // if data never binded, bind it right now!\n      if ( !data ) {\n        $this.data( 'garlic', ( data = new Garlic( self, storage, fieldOptions ) ) );\n      }\n\n      // here is our garlic public function accessor, currently does not support args\n      if ( 'string' === typeof option && 'function' === typeof data[option] ) {\n        return data[option]();\n      }\n    }\n\n    // loop through every elemt we want to garlic\n    this.each(function () {\n\n      // if a form elem is given, bind all its input children\n      if ( $( this ).is( 'form' ) ) {\n        $( this ).find( options.inputs ).each( function () {\n          if ( $( this ).is( options.excluded ) ) { return; }\n          returnValue = bind( $( this ) );\n        });\n\n      // if it is a Garlic supported single element, bind it too\n      // add here a return instance, cuz' we could call public methods on single elems with data[option]() above\n      } else if ( $( this ).is( options.inputs ) ) {\n        if ( $( this ).is( options.excluded ) ) { return; }\n        returnValue = bind( $( this ) );\n      }\n    });\n\n    return 'function' === typeof fn ? fn() : returnValue;\n  }\n\n  /* GARLIC CONFIGS & OPTIONS\n  * ========================= */\n  $.fn.garlic.Constructor = Garlic;\n\n  $.fn.garlic.defaults = {\n      destroy: true                                                                                         // Remove or not localstorage on submit & clear\n    , inputs: 'input, textarea, select'                                                                     // Default supported inputs.\n    , excluded: 'input[type=\"file\"], input[type=\"hidden\"], input[type=\"submit\"], input[type=\"reset\"], [data-persist=\"false\"]'                            // Default ignored inputs.\n    , events: [ 'DOMAttrModified', 'textInput', 'input', 'change', 'click', 'keypress', 'paste', 'focus' ]  // Events list that trigger a localStorage\n    , domain: false                                                                                         // Store et retrieve forms data accross all domain, not just on\n    , expires: false                                                                                        // false for no expiration, otherwise (int) in seconds for auto-expiration\n    , conflictManager: {\n        enabled: false                                                                                      // Manage default data and persisted data. If false, persisted data will always replace default ones\n      , garlicPriority: true                                                                                // If form have default data, garlic persisted data will be shown first\n      , template: '<span class=\"garlic-swap\"></span>'                                                       // Template used to swap between values if conflict detected\n      , message: 'This is your saved data. Click here to see default one'                                   // Default message for swapping data / state\n      , onConflictDetected: function ( $item, storedVal ) { return true; }                                  // This function will be triggered if a conflict is detected on an item. Return true if you want Garlic behavior, return false if you want to override it\n    }\n   , getPath: function ( $item ) {}                                                                         // Set your own key-storing strategy per field\n   , preRetrieve: function ( $item, currentValue, storedVal ) { return storedVal; }                         // This function will be triggered before retrieve, and allows to override setting the field's value restored from local storage\n   , onRetrieve: function ( $item, storedVal ) {}                                                           // This function will be triggered each time Garlic find an retrieve a local stored data for a field\n   , prePersist: function ( $item, storedVal ) { return false; }                                            // This function will be triggered before Garlic, and allows to override the value stored to local storage\n   , onPersist: function ( $item, storedVal ) {}                                                            // This function will be triggered each time Garlic stores a field to local storage\n   , onSwap: function ( $item, prevValue, curValue ) {}                                                     // This function will be triggered each time Garlic swap values with conflict manager\n  }\n\n\n  /* GARLIC DATA-API\n  * =============== */\n  $( window ).on( 'load', function () {\n    $( '[data-persist=\"garlic\"]' ).each( function () {\n      $(this).garlic();\n    })\n  });\n\n// This plugin works with jQuery or Zepto (with data extension builded for Zepto. See changelog 0.0.6)\n}(window.jQuery || window.Zepto);\n"],"sourceRoot":""}